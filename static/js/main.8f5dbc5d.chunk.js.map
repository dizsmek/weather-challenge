{"version":3,"sources":["cities.js","WeatherTable.js","SelectionPanel.js","ReloadButton.js","App.js","index.js"],"names":["cities","name","id","WeatherTable","weatherData","cityNamesToShow","citiesToShow","map","cityIndex","weatherDataToShow","filter","cityData","includes","cityName","dataSource","columns","title","dataIndex","key","rowKey","pagination","Option","Select","SelectionPanel","updateCitiesToShow","cityNames","city","mode","allowClear","style","width","placeholder","defaultValue","onChange","value","i","ReloadButton","updateWeatherData","fetchWeatherData","a","tableDataFromFetchResult","fetchResult","main","temp","temp_min","time","Date","toLocaleTimeString","data","fetch","json","cityDataObject","push","console","error","useEffect","type","onClick","App","useState","setWeatherData","cityIndexes","Array","from","length","keys","_","String","setCitiesToShow","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAaA,EAAS,CACpB,CACEC,KAAM,SACNC,GAAI,SAEN,CACED,KAAM,cACNC,GAAI,SAEN,CACED,KAAM,WACNC,GAAI,SAEN,CACED,KAAM,cACNC,GAAI,SAEN,CACED,KAAM,UACNC,GAAI,U,QCiBOC,EAhCM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAChBC,EADgD,EAAnBC,aACEC,KAAI,SAAAC,GAAS,OAAIR,EAAOQ,GAAWP,QAClEQ,EAAoBL,EAAYM,QAAO,SAAAC,GAAQ,OAAIN,EAAgBO,SAASD,EAASE,aAyB3F,OACE,cAAC,IAAD,CAAOC,WAAYL,EAAmBM,QAxBxB,CACd,CACEC,MAAO,YACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,cACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,mBACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,cACPC,UAAW,OACXC,IAAK,SAKiDC,OAAO,KAAKC,YAAY,K,QC5B5EC,EAAWC,IAAXD,OA2BOE,EAzBQ,SAAC,GAA0C,IAAxCjB,EAAuC,EAAvCA,aAAckB,EAAyB,EAAzBA,mBAChCC,EAAYzB,EAAOO,KAAI,SAAAmB,GAAI,OAAIA,EAAKzB,QAM1C,OACE,cAAC,IAAD,CACE0B,KAAK,WACLC,YAAU,EACVC,MAAO,CAAEC,MAAO,QAChBC,YAAY,uBACZC,aAAc1B,EACd2B,SAX0B,SAACC,GAC7BV,EAAmBU,IAInB,SASIT,EAAUlB,KAAI,SAACmB,EAAMS,GAAP,OACZ,cAACd,EAAD,UAAiBK,GAAJS,S,2CCwBRC,EA1CM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAEhBC,EAAgB,uCAAG,wCAAAC,EAAA,+DAEfC,EAA2B,SAACC,EAAa5B,GAAc,IACnDX,EAAauC,EAAbvC,GAAIwC,EAASD,EAATC,KAIZ,MAAO,CACLxC,KACAW,WACA8B,KANyBD,EAAnBC,KAONC,SAPyBF,EAAbE,SAQZC,MAPW,IAAIC,MAAOC,uBAWpBC,EAAO,GAhBQ,cAkBFhD,GAlBE,gEAkBV0B,EAlBU,kBAmBIuB,MAAM,sDAAD,OAAuDvB,EAAKxB,GAA5D,kBAvBpB,qCAIW,eAmBbS,EAnBa,iBAoBUA,EAASuC,OApBnB,QAoBbC,EApBa,OAsBnBH,EAAKI,KAAKZ,EAAyBW,EAAgBzB,EAAKzB,OAtBrC,+IAyBrBoC,EAAkBW,GAzBG,kDA2BrBK,QAAQC,MAAR,MA3BqB,uEAAH,qDAmCtB,OAJAC,qBAAU,WACRjB,MACC,IAGD,cAAC,IAAD,CAAQkB,KAAK,UAAUC,QAASnB,EAAhC,sBCrBWoB,EAfH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACTvD,EADS,KACIwD,EADJ,KAGVC,EAAcC,MAAMC,KAAKD,MAAM9D,EAAOgE,QAAQC,QAAQ1D,KAAI,SAAC2D,EAAG/B,GAAJ,OAAUgC,OAAOhC,MAHjE,EAIwBwB,mBAASE,GAJjC,mBAITvD,EAJS,KAIK8D,EAJL,KAMhB,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAgB/D,aAAcA,EAAckB,mBAAoB,SAACxB,GAAaoE,EAAgBpE,MAC9F,cAAC,EAAD,CAAcM,aAAcA,EAAcF,YAAaA,IACvD,cAAC,EAAD,CAAciC,kBAAmB,SAACW,GAAWY,EAAeZ,UCblEsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8f5dbc5d.chunk.js","sourcesContent":["export const cities = [\n  {\n    name: \"Cairns\",\n    id: 2172797\n  },\n  {\n    name: \"Los Angeles\",\n    id: 1705545\n  },\n  {\n    name: \"Linjiang\",\n    id: 1796228\n  },\n  {\n    name: \"East London\",\n    id: 1006984\n  },\n  {\n    name: \"Shanggu\",\n    id: 1796247\n  }\n];","import React from 'react';\nimport { Table } from 'antd';\nimport { cities } from './cities';\n\nconst WeatherTable = ({ weatherData, citiesToShow }) => {\n  const cityNamesToShow = citiesToShow.map(cityIndex => cities[cityIndex].name);\n  const weatherDataToShow = weatherData.filter(cityData => cityNamesToShow.includes(cityData.cityName));\n\n  const columns = [\n    {\n      title: \"City Name\",\n      dataIndex: \"cityName\",\n      key: \"cityName\"\n    },\n    {\n      title: \"Temperature\",\n      dataIndex: \"temp\",\n      key: \"temp\"\n    },\n    {\n      title: \"Min. Temperature\",\n      dataIndex: \"temp_min\",\n      key: \"temp_min\"\n    },\n    {\n      title: \"Uploaded at\",\n      dataIndex: \"time\",\n      key: \"time\"\n    }\n  ];\n\n  return (\n    <Table dataSource={weatherDataToShow} columns={columns} rowKey='id' pagination={false} />\n  );\n};\n\nexport default WeatherTable;\n","import React from 'react';\nimport { Select } from 'antd';\nimport { cities } from './cities';\n\nconst { Option } = Select;\n\nconst SelectionPanel = ({ citiesToShow, updateCitiesToShow }) => {\n  const cityNames = cities.map(city => city.name);\n\n  const handleSelectionChange = (value) => {\n    updateCitiesToShow(value);\n  }\n\n  return (\n    <Select\n      mode=\"multiple\"\n      allowClear\n      style={{ width: '100%' }}\n      placeholder=\"Please select a city\"\n      defaultValue={citiesToShow}\n      onChange={handleSelectionChange}\n    >\n      {\n        cityNames.map((city, i) => (\n          <Option key={i}>{city}</Option>\n        ))\n      }\n    </Select>\n  );\n};\n\nexport default SelectionPanel;\n","import React, { useEffect } from 'react';\nimport { cities } from './cities';\nimport { Button } from 'antd';\n\nconst API_KEY = \"b944703ce65ed6cf6b71dd3a2873dd9d\";\n\nconst ReloadButton = ({ updateWeatherData }) => {\n\n  const fetchWeatherData = async () => {\n    try {\n      const tableDataFromFetchResult = (fetchResult, cityName) => {\n        const { id, main } = fetchResult;\n        const { temp, temp_min } = main;\n        const time = new Date().toLocaleTimeString();\n\n        return {\n          id,\n          cityName,\n          temp,\n          temp_min,\n          time\n        };\n      }\n\n      const data = [];\n\n      for (const city of cities) {\n        const cityData = await fetch(`https://api.openweathermap.org/data/2.5/weather?id=${city.id}&appid=${API_KEY}`);\n        const cityDataObject = await cityData.json();\n\n        data.push(tableDataFromFetchResult(cityDataObject, city.name));\n      }\n\n      updateWeatherData(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchWeatherData();\n  }, []);\n\n  return (\n    <Button type='primary' onClick={fetchWeatherData}>Refresh</Button>\n  );\n};\n\nexport default ReloadButton;\n","import React, { useState } from 'react';\nimport WeatherTable from './WeatherTable';\nimport SelectionPanel from './SelectionPanel';\nimport ReloadButton from './ReloadButton';\nimport { cities } from './cities';\n\nimport './index.css';\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState([]);\n\n  const cityIndexes = Array.from(Array(cities.length).keys()).map((_, i) => String(i));\n  const [citiesToShow, setCitiesToShow] = useState(cityIndexes);\n\n  return (\n    <div className=\"App\">\n      <SelectionPanel citiesToShow={citiesToShow} updateCitiesToShow={(cities) => { setCitiesToShow(cities) }} />\n      <WeatherTable citiesToShow={citiesToShow} weatherData={weatherData} />\n      <ReloadButton updateWeatherData={(data) => { setWeatherData(data) }} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}